import os
import sys

from E01Example_14_01 import E01Example_14_01
from E01Example_14_02 import E01Example_14_02

"""
모듈화 프로그래밍이란?
- 명령문을 기능 별로 나누어 관리함으로서 관리에 대한 효율성을 높히는 방법을 의미한다. (즉, 하나의 파일에 많은 명령문이 존재 할 경우 해당 파일을
관리하는 것이 상대적으로 어려워진다는 것을 알 수 있다.)

모듈이라는 것은 프로그램을 구성하는 명령문 중 일부분을 의미하며 해당 모듈을 조합함으로서 프로그램을 완성하는 것이 모듈화 프로그래밍이다.
프로그래밍에서 모듈은 특정 메서드가 될 수도 있고 관련 명령문을 모아놓은 파일이 될 수도 있다. (즉, 모듈이라는 것은 기능을 얼마나 세부적으로
분할하는지에 따라 범위가 결정된다는 것을 알 수 있다.)

Python 에서 모듈은 일반적으로 파일을 의미하기 때문에 특정 모듈을 사용한다는 것은 파일에 존재하는 여러 기능을 사용한다는 의미가 된다.
또한, Python 은 패키지를 지원하며 패키지는 여러 모듈을 다시 하나의 단위로 묶어주는 개념을 의미한다.

Ex)
패키지 1
	- 모듈 1
		- 기능 1 (메서드, 클래스 등등...)
		- 기능 2
		- 등등...
	- 모듈 2
	- 등등...
패키지 2
	- 모듈 1
	- 모듈 2
	- 등등...
	
위와 같이 패키지 하위에는 여러 모듈이 존재하기 때문에 패키지는 기능을 분류하는 가장 최상위의 단위라는 것을 알 수 있다.

단, Python 은 특정 패키지를 추가하고 싶다면 해당 패키지가 sys.path 변수에 포함 된 경로 하위에 존재해야한다. (즉, sys.path 변수는 리스트
자료형이며 해당 변수에는 Python 패키지를 추가하기 위한 여러 경로가 포함되어있다는 것을 알 수 있다.)
"""

# Example 14
def E01Example_14(args):
	# E01Example_14_01(args)
	E01Example_14_02(args)
