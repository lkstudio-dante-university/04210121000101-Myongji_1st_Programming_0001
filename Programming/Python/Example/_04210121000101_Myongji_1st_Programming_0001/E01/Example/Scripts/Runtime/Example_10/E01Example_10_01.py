import os
import sys

g_nGlobalVal = 0

# Example 10 - 1
def E01Example_10_01(args):
	"""
	Python 은 변수의 선언과 사용이 명확하게 구분되지 않기 때문에 특정 변수를 사용 할 때 이를 주의해야한다. (즉, 특정 변수의 값을 가져오는
	것은 항상 변수의 사용에 해당하지만 특정 변수에 값을 저장하는 행위는 선언과 사용 모두 해당한다는 것을 알 수 있다.)
	
	특정 변수에 값을 할당 할 경우 이는 변수 선언에 해당하며 이미 선언 된 변수에 값을 할당하는 것은 변수의 사용에 해당한다.
	"""
	nVal = 10
	fVal = 3.14
	bIsTrue = True
	
	"""
	global 키워드는 전역 변수를 사용하겠다는 것을 알리는 역할을 수행한다. (즉, 해당 키워드를 사용하지 않고 전역 변수에 값을 할당 할 경우
	이는 전역 변수의 사용이 아니라 전역 변수와 동일한 이름을 지니는 지역 변수의 선언에 해당한다는 것을 알 수 있다.)
	
	Python 은 특정 지역이 항상 전역보다 우선 순위가 높기 때문에 특정 지역에서 전역 변수를 사용하기 위해서는 반드시 global 키워드를 명시해
	줘야한다.
	"""
	global g_nGlobalVal
	g_nGlobalVal = 10
	
	"""
	변수 이름을 명시하는 것은 해당 변수에 저장 된 데이터를 가져오는 것을 의미한다. (즉, 정수 10 이 저장 된 특정 변수가 있을 경우 해당 변수에
	저장 된 10 이라는 값을 가져오고 싶다면 해당 변수의 이름을 명시하면 된다는 것을 알 수 있다.)
	
	단, 선언 되지 않은 변수를 명시 할 경우 런타임 에러가 발생하기 때문에 변수의 데이터를 가져오는 것은 주의가 필요하다. (즉, 변수의 데이터를
	가져오는 과정에서 에러가 발생한다면 해당 변수가 선언 된 변수인지 먼저 확인 할 필요가 있다는 것을 알 수 있다.)
	
	문자열 포맷팅이란?
	- 문자열의 일부 or 전체를 특정 데이터롤 치환해서 문자열 데이터를 생성 할 수 있는 기능을 의미한다. (즉, 문자열 포맷팅을 활용하면 변수 등을
	사용해서 원하는 문장을 자유롭게 구성 할 수 있다는 것을 알 수 있다.)
	
	Python 문자열 포맷팅 사용 방법
	- 서식 문자를 포함하고 있는 문자열 데이터 + 데이터
	
	Ex)
	"{0}, {1}".format(10, 20)					<- "10, 20" 문자열 데이터 생성
	"{0} + {1} = {2}".format(10, 20, 10 + 20)	<- "10 + 20 = 30" 문자열 데이터 생성
	
	Python 서식 문자는 { } 와 번호 조합을 통해 명시하는 것이 가능하다. (즉, 번호는 format 메서드에 전달 되는 데이터의 순서를 의미한다는
	것을 알 수 있다.)
	
	단, 서식 문자 번호는 1 이 아니라 0 부터 시작하기 때문에 주의가 필요하다.
	"""
	print("=====> 값 형식 자료형 <=====")
	print("{0}, {1}".format(nVal, type(nVal)))
	print("{0}, {1}".format(fVal, type(fVal)))
	print("{0}, {1}".format(bIsTrue, type(bIsTrue)))
	
	oStr = "Hello, World!"
	oList = [1, 2, 3, 4, 5]
	oDict = {"Key_01": 1, "Key_02": 2, "Key_03": 3, "Key_04": 4, "Key_05": 5}
	oTuple = (1, 2, 3, 4, 5)
	
	print("\n=====> 참조 형식 자료형 <=====")
	print("{0}, {1}".format(oStr, type(oStr)))
	print("{0}, {1}".format(oList, type(oList)))
	print("{0}, {1}".format(oDict, type(oDict)))
	print("{0}, {1}".format(oTuple, type(oTuple)))
